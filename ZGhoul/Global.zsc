enum GFCustomDmgFlags
{
	DMG_INFO = 1 << 30
};

enum GFThrustFlags
{
	RADF_ALWAYSTHRUST = 	1 << 30,
	RADF_NOFACTORTHRUST = 	1 << 31
};

enum GFExploFlags
{	
	EXF_PARENT = 		1 << 0,
	EXF_INVERSE =		1 << 1,
	EXF_HITFLOOR =		1 << 2,
	EXF_HITWALL =		1 << 3,
	EXF_HITCEILING =	1 << 4,
	EXF_2D =			1 << 5,
	EXF_CENTERZ =		1 << 6,
	EXF_OVERRIDE =		1 << 7,
	EXF_NOSIGHT =		1 << 8,
	
	EXF_HITLEVEL = EXF_HITFLOOR|EXF_HITWALL|EXF_HITCEILING
};

Class GFGlobal play
{
	//x = (((x - x_min) % (x_max - x_min)) + (x_max - x_min)) % (x_max - x_min) + x_min;
	
	static BlockThingsIterator MakeBTIPos(Vector3 pos, Vector2 RH)
	{
		let it = BlockThingsIterator.CreateFromPos(
			pos.x, pos.y, pos.z - RH.Y, RH.Y + RH.X * 2, RH.X, false);
		return it;
	}
	
	static void ModuloV3(out Vector3 v, double mod)
	{
		if (mod ~== 0.0)
		{
			ThrowAbortException("Modulus must not be zero!");
			return;
		}
		
		v.x %= mod;
		v.y %= mod;
		v.z %= mod;
		
		if (v.x < 0.0 || v.y < 0.0 || v.z < 0.0)
		{
			while (v.x < 0.0)	v.x += mod;
			while (v.y < 0.0)	v.y += mod;
			while (v.z < 0.0)	v.z += mod;
		}
	}
	
	int invMod2(int dividend, int divisor, int min)
	{
		int m = min/divisor * divisor; // must be in this order
		int output = m + dividend % divisor;
		while (output < min)
			output += divisor;
		return output;
	}

	/*--------------------------------------------------------------------------
	GetFalloff
	
	Gets a falloff scalar, primarily used for effect radius. Can also be 
	thought of as how much of a percentage (when multiplied by 100) a thing has
	travelled from point 1 (dmax) to point 2 (dmin).
	
	-- Arguments --
	*dmin 
		The closest distance to check the calculation. Anything closer to this
		received maximum damage, for example.
		
	*dmax
		The farthest distance. Anything between here and demin receives falloff
		that lessens the closer they are to dmax.
		
	*dist
		The current point of travel.
		
	-- Result --
	Returns a scalar value between [0.0, 1.0].
	--------------------------------------------------------------------------*/

	static double GetFalloff(double dmin, double dmax, double dist)
	{
		dmin = Max(0, dmin);
		dmax = Max(0, dmin, dmax);
		
			 if (dist <= dmin)	return 1.0;
		else if (dist > dmax)	return 0.0;
		else
		{
			double radius = Max(1.0, dmax - dmin);
			return (1.0 - ((dist - dmin) / radius));
		}
		return 0;
	}

	/*--------------------------------------------------------------------------
	GetDamageFalloff
	
	Does a trace to the victim from the bomb, and calculates the damage falloff.
	Used by Explode for proper thrusting implementation.
	
	-- Arguments --
	*bomb
		Trace starts here. Placed at the feet, or middle if centerz is true.
		
	*victim
		Trace ends at the bounding box of this actor.
		
	*radius
		Spherical radius, used primarily falloff calculation.
		
	*full
		Distance in which there is no falloff.
		
	*_2d
		Ignores z height differences, like OLDRADIUSDMG.
		
	*centerz
		If true, the trace comes from the bomb's middle instead of the base.
		
	--------------------------------------------------------------------------*/
	static double GetDamageFalloff(Actor bomb, Actor victim, double radius, double full, 
		GFExploFlags flags)
	{
		// No point running this when without something to trace towards.
		if (!bomb || !victim || radius <= 0)		return 0.0;
		
		// Full force in this case.
		if (bomb == victim || full >= radius) 		return 1.0;
		
		// Aim from the base of the bomb to the victim's middle.
		Vector3 bpos = bomb.pos,
				vpos = victim.pos + (0,0,victim.height * 0.5);
				
		
		// GZDoom's OLDRADIUSDMG basically.
		if (flags & EXF_2D)	vpos.z = bpos.z;
		else if (flags & EXF_CENTERZ) bpos.z += bomb.height * 0.5;
		
		if (bpos ~== vpos) 
			return 1.0;
			
		Vector3 APR = level.Vec3Diff(bpos, vpos);
		if (bpos.XY ~== vpos.XY)
		{
			// Traces don't work on entities that are directly above/below.
			vpos.X += double.equal_epsilon;
		}
		
		
		
		// Use a trace to get the edge of the bounding box. We'll use this point
		// to ensure they're more affected than what GZDoom's code uses, which is
		// the center. This also turns it radial instead of using a box.
		
		let trc = new('GFBoomTracer');
		trc.trg = victim;
		
		trc.Trace(bpos, bomb.cursector, APR, radius * 2, 0); // *2: Just to make sure it hits.
		
		if (trc.Results.HitType == TRACE_HitActor)
		{
			// Apparently this just indicates what was passed in, not the actual distance
			// from start to hit point. Only adjusted if it hit a plane, weirdly enough...
		//	double dist = trc.Results.Distance;
			double dist = level.Vec3Diff(trc.Results.HitPos, bpos).Length();
			return GetFalloff(full, radius, dist);
			/*
			if (dist > radius)		return 0.0;
			else if (dist <= full)	return 1.0;
			else
			{
				double size = radius - full;
				double ret = (1.0 - ((dist - full) / size));
				return ret;
			}
			*/
		}
		return 0.0;
	}

	/*--------------------------------------------------------------------------
	Explode
	
	Replicates a more realistic form of thrusting with explosions. No nails
	though. Also doesn't support DontHurtShooter or deprecated stuff.
	
	-- Arguments --
	*bomb
		The actor dealing the damage
	
	*source 
		he actor responsible for bomb. Replaces XF_NOTMISSILE.
	
	*damage
		Damage to deal. Uses ExplosionDamage if < 1 (default).
	
	*radius
		Radius of explosion. Uses ExplosionRadius if < 1 (default).
	
	*full
		Inner radius ring to deal maximum damage.
	
	*thrust
		How much force to apply based on A_RadiusThrust. Default is -1,
		which translates to damage * 30 (since otherwise the thrust would be 
		microscopic).
		
	*trad
		Radius specifically for thrust. Defaults to damage radius.
	
	*tfull
		Full thrust radius. Defaults to full damage radius.
	
	*flags
		A_Explode flags. XF_NOTMISSILE is ignored. Use source instead.
	
	*radflags
		A_RadiusThrust flags. Only some supported.
		RADF_ALWAYSTHRUST - New flag, always applies thrust even if the actor
			were to be excluded.
		RADF_NODAMAGE - No explosion damage dealt, but thrusting will apply
			BLASTED flag.
		RADF_NOIMPACTDAMAGE - Prevents BLASTED flag from being applied.
		RADF_RADF_NOFACTORTHRUST - Don't mix the thrusting power with damage
			resistance.
		
	
	*alert
		Wake up monsters nearby? Use with care. Repeated usage of this causes
		slowdowns with the game, especially on larger maps with more monsters!
	
	*DamageType
		The damage type of the bomb. If none, use bomb's unless
		XF_EXPLICITDAMAGETYPE is in flags.
		
	*filter
		If not null, only this class can receive damage from it.
		
	*eflags
		EXF_PARENT - Actors inheriting from filter are included with it.
		EXF_INVERSE - Filter behaves as a blacklist instead of a whitelist.
	
	Returns # of actors damaged.
	--------------------------------------------------------------------------*/
	static int Explode(Actor bomb, Actor source, 
		int damage = -1, int radius = -1, int full = 0, 
		double thrust = -1, double trad = -1, int tfull = -1,
		int flags = XF_HURTSOURCE, GFThrustFlags radflags = 0, 
		bool alert = false, Name DamageType = 'None', 
		Class<Actor> filter = null, GFExploFlags eflags = EXF_PARENT|EXF_HITLEVEL|EXF_CENTERZ)
	{
		if (!bomb)	
			return 0;
		
		bool DamageAsVel = false;
		double thrustmul = 30.0;
		if (damage < 0)	damage = bomb.ExplosionDamage;
		if (radius < 0)	radius = bomb.ExplosionRadius;
		if (thrust < 0)	{thrust = double(damage * thrustmul);	DamageAsVel = true; }
		if (trad < 0)	trad = double(radius);
		full = Max(0, full);
		if (tfull < 0)	tfull = double(full);
		
		if ((damage == 0 && thrust == 0) || (radius == 0 && trad == 0))
			return 0;
		
		if (source && !(flags & XF_EXPLICITDAMAGETYPE) && DamageType == 'None')
			DamageType = source.DamageType;
		
		// Set up the iterator stuff. Do NOT deal any damage or thrusting until
		// after the iterator is complete. If an actor is destroyed during 
		// iteration, the engine won't have enough time to fill in the missing
		// data link and the iteration will end abruptly!
		
		Vector3 pos = bomb.pos;
		int count = 0;
		Array<Actor> Mon; Mon.Clear();
		Array<Bool> NoDmg; NoDmg.Clear();
		
		// Code copied directly from P_RadiusAttack, ensuring accuracy.
		let it = BlockThingsIterator.CreateFromPos(
			pos.x, pos.y, pos.z - radius, bomb.height + radius * 2, radius, false);
		Actor mo = null;
		while (it.Next())
		{
			mo = it.thing;
			if (!mo || (!mo.bSHOOTABLE && !mo.bVULNERABLE))
				continue;
			
			// If the filter is used, only actors of that type may be damaged.
			// If inverse is used, all BUT filter can be damaged.
			bool parent = (eflags & EXF_PARENT);
			bool inverse = (eflags & EXF_INVERSE);
			if (filter)
			{
				if ((!inverse && ((parent && !(mo is filter)) || (!parent && mo.GetClass() != filter))) ||
					(inverse && ((parent && (mo is filter)) || (!parent && mo.GetClass() == filter))))
						continue;
			}
				
			// Filter out what classes are ineligible for damage.
			bool NoDamage = (
				(mo.bNORADIUSDMG && !bomb.bFORCERADIUSDMG) ||
				(mo == source && !(flags & XF_HURTSOURCE)) ||
				(bomb.bDONTHARMCLASS && bomb.GetClass() == mo.GetClass()) ||
				(bomb.bDONTHARMSPECIES && bomb.Species == mo.Species));
			
			// If we want to exclude damage and don't care for thrusting,
			// no need to continue.
			if (NoDamage && !(radflags & RADF_ALWAYSTHRUST))
				continue;
			
			// No need for distance checks here. A trace is performed later which
			// handles that for this function.
			if (!(eflags & EXF_NOSIGHT) && !mo.CheckSight(bomb, SF_IGNOREVISIBILITY|SF_IGNOREWATERBOUNDARY))
				continue;
			
			// Actor qualifies. Record it and whether to deal damage or not.
			Mon.Push(mo);
			NoDmg.Push(NoDamage);
		}
		
		//----------------------------------------------------------------------
		//----------------------------------------------------------------------
		// Now that we have all the actors, time to deal damage.
		for (int i = 0; i < Mon.Size(); i++)
		{
			mo = Mon[i];
			if (!mo)	continue;
			bool NoDamage = NoDmg[i];
			
			// Replicate the A_Explode effect by disallowing thrusting damage.
			// If thrusting is wanted despite not qualify for A_Explode, then
			// don't assign BLASTED flag.
			int tflags = radflags;
			if (NoDamage && !(tflags & RADF_NODAMAGE))
				tflags |= (RADF_NODAMAGE|RADF_NOIMPACTDAMAGE);
			
			// Deal the damage/thrusting.
			// First, calculate the damage based on distance. In this case it does
			// a trace to find the closest point on the bounding box.
			int dmg = damage;
			
			int thr = 10000;
			if (!mo.bKILLED)
			{
				if (source)		thr = source.GetModifiedDamage(DamageType, thr, false);
				if (thr > 0)	thr = mo.GetModifiedDamage(DamageType, thr, true);
				if (thr > 0)	thr = mo.ApplyDamageFactor(DamageType, thr);
			}
			
			double thrs = double(thr) * 0.0001;
			//bomb.bOLDRADIUSDMG, (flags & XF_NOTMISSILE)
			if (!(eflags & EXF_OVERRIDE))
			{
				if (bomb.bOLDRADIUSDMG)		eflags |= EXF_2D;
				if (flags & XF_NOTMISSILE)	eflags |= EXF_CENTERZ;
			}
			double falloff = GFGlobal.GetDamageFalloff(bomb, mo, double(radius), double(full), eflags);
			dmg = int(round(dmg * mo.RadiusDamageFactor * falloff));
			
			// Bear in mind the division by mass GREATLY dilutes the thrusting
			// power, hence why if thrust < 0, it'll multiply by 30.
						
			if (thrust > 0 && !mo.bDONTTHRUST && (!bomb.bNODAMAGETHRUST || (tflags & RADF_NODAMAGE)))
			{
				double newthrust = thrust;
				double tfall = GFGlobal.GetDamageFalloff(bomb, mo, double(trad), double(tfull), eflags);
				if (DamageAsVel)
					newthrust = double(dmg * thrustmul);
				
				if (!(tflags & RADF_NOFACTORTHRUST))
				{
					newthrust *= thrs;
				}
				newthrust = (newthrust * tfall) * 0.5;
				if (mo.mass > 0)
					newthrust /= double(mo.mass);
					
				if (newthrust >= 0.01)
				{
					Vector3 bpos = bomb.pos;
					Vector3 mpos = mo.pos + (0,0,mo.height * 0.5);
					
					if (flags & XF_NOTMISSILE)
						bpos.Z += bomb.height * 0.5;
					
					if (mo == bomb)
						mo.Vel.Z += newthrust;
					else if (bomb.bOLDRADIUSDMG) 
						mo.Vel.XY += level.Vec2Diff(bpos.XY, mpos.XY).Unit() * newthrust;
					else
						mo.Vel += level.Vec3Diff(bpos, mpos).Unit() * newthrust;
					
					if ((tflags & RADF_NODAMAGE) && !(tflags & RADF_NOIMPACTDAMAGE) &&
						!(mo is 'PlayerPawn') && !mo.player)
						mo.bBLASTED = true;
				}
			}
			
			
			int res = (tflags & RADF_NODAMAGE) ? 0 : dmg;
			
			if (res > 0 || bomb.bFORCEZERORADIUSDMG)
			{
				res = mo.DamageMobj(bomb, source, res, DamageType, DMG_EXPLOSION|DMG_THRUSTLESS);
				if (res > 0)
					count++;
			}
			
			
		}
		
		// Side note, try not to rely on doing this often. It causes immense slowdowns.
		if (alert)		bomb.A_AlertMonsters();
		return count;
	}
	
	//--------------------------------------------------------------------------
	// StaticTurnAng
	// 
	// A realistic form of turning that isn't restricted via angle and pitch.
	// Coded by KeksDose, modified by Major Cooke.
	// 
	// * Caller: The actor to do the turning.
	// * Mo: The actor Caller turn towards.
	// * Angl: The angle in degrees to turn. Default is 5.0
	// * HeightOffset: Multiplier value of mo's height between [0.0,1.0]. 
	// 		0.0 means aim at the bottom, 1.0 means aim at the top. 
	//		Default is 0.5 (middle).
	// * Seeker: If true, the velocity of the actor is set and then aimed.
	//		Otherwise, simply turns the actor in the direction.
	// 		In general, avoid using this. It's only here for SeekAng's purposes.
	// * Flags: Same flags as A_SeekerMissile. Only used if it's a seeker.
	//--------------------------------------------------------------------------
	static void StaticTurnAng(Actor caller, Actor mo, double angl = 5, double heightoffset = 0.5, 
		bool seeker = false, int seekflags = 0)
	{
		if (!caller || !mo || angl <= 0.0)	return;
		
		heightoffset = Clamp(heightoffset, 0.0, 1.0);
		
		double angle = caller.angle;
		double pitch = caller.pitch;
		Vector3 pos = caller.pos;
		
		Vector3 dir = levellocals.vec3diff(pos, mo.Vec3Offset(0, 0, mo.height * heightoffset));
		
		Vector3 view = (cos(angle)*cos(pitch),sin(angle)*cos(pitch),-sin(pitch));
		dir				= dir.unit();
		let view_unit	= view.unit();
		let cosang		= view_unit dot dir;
		
		if (cosang < -0.999) // Facing opposite, so you can do whatever you like here!
		{
			caller.angle += angl;
		}
		else if (cosang < 0.999) // Not yet locked on
		{
			let ver_axis	= (view_unit - cosang * dir).unit();
			let ang			= acos(cosang);
		   
			// Turn. This is all local polar coordinates.
			ang = max(0, ang - angl);
			view = (cos(ang) * dir + sin(ang) * ver_axis);			
		}
		
		if (seeker)
		{
			if (seekflags & SMF_CURSPEED)
				caller.vel = caller.vel.Length() * view;
			else
				caller.vel = caller.speed * view;
			caller.A_FaceMovementDirection();
		}
		else
		{
			int flag = (caller.bINTERPOLATEANGLES) ? SPF_INTERPOLATE : 0;
			caller.A_SetAngle(VectorAngle(view.x, view.y), flag);
			caller.A_SetPitch(asin(-view.z), flag);
		}
	}
	
	//--------------------------------------------------------------------------
	// A replacement for A_SeekerMissile. This performs StaticTurnAng above
	// after doing a bit of prep work to make sure it still behaves like 
	// a seeker missile does. Flags are the same as A_SeekerMissile's.
	//--------------------------------------------------------------------------
	static void StaticSeekAng(Actor caller, double angl = 5, double heightoffset = 0.5, 
		int flags = 0, bool forceseek = false)
	{
		if (!caller || !caller.bSEEKERMISSILE ||
			(caller.vel ~== (0,0,0) && ((flags & SMF_CURSPEED) || caller.speed <= 0)))
			return;
			
		if (!caller.Tracer || caller.Tracer.Health < 1 || (!forceseek && caller.Tracer.bCANTSEEK))
		{
			caller.Tracer = null;
			if (flags & SMF_LOOK)	
			{
				Vector3 oldvel = caller.vel,
						oldpos = caller.pos,
						oldpre = caller.prev,
						dir = (caller.angle, caller.pitch, caller.roll);
				
				caller.A_SeekerMissile(1, 1, flags);
				
				if (caller.Tracer)
				{
					caller.vel = oldvel;
					caller.SetOrigin(oldpos, false);
					caller.prev = oldpre;
					caller.angle = dir.x;
					caller.pitch = dir.y;
					caller.roll = dir.z;
				}
				else return;
			}
			else return;
		}
		if (!(caller.vel ~== (0,0,0)))
			caller.A_FaceMovementDirection();
		GFGlobal.StaticTurnAng(caller, caller.tracer, angl, heightoffset, true, flags);
	}
	
	//--------------------------------------------------------------------------
	// Code from Gutamatics
	//--------------------------------------------------------------------------
	/// Linearly interpolates between two Vector3s, clamping the parameters.
	static Vector3 lerpVec3(Vector3 from, Vector3 to, double time) {
		time = clamp(time, 0, 1);
		return lerpUnclampedVec3(from, to, time);
	}
	
	/// Linearly interpolates between two Vector3s.
	static Vector3 lerpUnclampedVec3(Vector3 from, Vector3 to, double time) {
		Vector3 ret;
		double reverseTime = 1 - time;
		ret = reverseTime * from + time * to;
		return ret;
	}
	
	/// Linearly interpolates between two Vector2s, clamping the parameters.
	static Vector2 lerpVec2(Vector2 from, Vector2 to, double time) {
		time = clamp(time, 0, 1);
		return lerpUnclampedVec2(from, to, time);
	}
	
	/// Linearly interpolates between two Vector2s.
	static Vector2 lerpUnclampedVec2(Vector2 from, Vector2 to, double time) {
		Vector2 ret;
		double reverseTime = 1 - time;
		ret = reverseTime * from + time * to;
		return ret;
	}
	
	/// Linearly interpolates between two doubles, clamping the parameters.
	static double lerpDouble(double from, double to, double time) {
		time = clamp(time, 0, 1);
		return lerpUnclampedDouble(from, to, time);
	}
	
	/// Linearly interpolates between two doubles.
	static double lerpUnclampedDouble(double from, double to, double time) {
		double ret;
		double reverseTime = 1 - time;
		ret = reverseTime * from + time * to;
		return ret;
	}
}

Class GFBoomTracer : LineTracer
{
	Actor trg;
	bool HitFloor, HitWall, HitCeiling;
	
	void SetHittable(int flor = -1, int wall = -1, int ceil = -1)
	{
		if (flor > -1 && flor < 2)	HitFloor = flor;
		if (wall > -1 && wall < 2)	HitWall = wall;
		if (ceil > -1 && ceil < 2)	HitCeiling = ceil;
	}
	
	override ETraceStatus TraceCallback() 
	{
		switch (Results.HitType) 
		{
			case TRACE_HitActor:
			{
				let mo = Results.HitActor;
				return (!mo || mo != trg) ? TRACE_Skip : TRACE_Stop;
			}

			case TRACE_HitFloor:
				return (HitFloor) ? TRACE_Stop : TRACE_Skip;
			case TRACE_HitCeiling:
				return (HitCeiling) ? TRACE_Stop : TRACE_Skip;
			case TRACE_HitWall:
				if (HitWall)
				{
					if (Results.Tier == TIER_Upper || Results.Tier == TIER_Lower) 
						return TRACE_Stop;

					int hf = Results.HitLine.flags;
					
					if (hf & (Line.ML_BLOCKEVERYTHING | Line.ML_BLOCKHITSCAN))
						return TRACE_Stop;
					
					if ((hf & Line.ML_BLOCKING) && (hf & Line.ML_TWOSIDED))
						return TRACE_Stop;
					
				}
				return TRACE_Skip;
			case TRACE_HitNone:
				return TRACE_Stop;
		}
		return TRACE_Skip;
	}
}

mixin class GFLightMixin
{
	
}

class GFGLLight : Thinker
{
	private Actor mo;
	private Name cname;
	private Color start, end;
	private Vector2 size;
	private int time, stime;
	private double div;
	static GFGLLight SetLightAnim(Actor mo, Name cname, Color cstart, Color cend, Vector2 csize, int ctime)
	{
		if (!mo || cname == '' || cname == 'None' || csize ~== (0,0) || ctime < 1)
			return null;
			
		let gl = new('GFGLLight');
		if (gl) gl.InitLight(mo, cname, cstart, cend, csize, ctime);
		return gl;
	}
	
	protected void InitLight(Actor cmo, Name lname, Color cstart, Color cend, Vector2 csize, int ctime)
	{
		mo = cmo;
		cname = lname;
		start = cstart;
		end = cend;
		size = csize;
		stime = time = ctime;
		div = (1.0 / double(time));
		
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		stime = time;
		if (mo) UpdateLight();
		else Destroy();
	}
	
	private Color VecToCol(Vector3 v)
	{
		int r = clamp(int(round(v.x)), 0, 255);
		int g = clamp(int(round(v.y)), 0, 255);
		int b = clamp(int(round(v.z)), 0, 255);
		return Color(r, g, b);
	}
	
	private void UpdateLight()
	{
		double step = div * time;
		Color cf = start;
		if (end != start)
		{	// Do this backwards since the steps are going from 1.0 to 0.0.
			Vector3 c1 = (end.r, end.g, end.b),
					c2 = (start.r, start.g, start.b),
					cc = GFGlobal.lerpVec3(c1, c2, step);
			cf = VecToCol(cc);
			
		}		
		double sc = (size.x ~== size.y) ? size.x : GFGlobal.LerpDouble(size.y, size.x, step);
		
		mo.A_AttachLight(cname, 
			DynamicLight.PointLight,
			cf, sc, sc, DYNAMICLIGHT.LF_ATTENUATE);
	}
	
	override void Tick()
	{
		if (!mo || time < 1)
		{	Destroy();	return;	}
		
		if (bDESTROYED || mo.IsFrozen())
			return;
			
		UpdateLight();
		--time;
	}
	
	override void OnDestroy()
	{
		if (mo) mo.A_RemoveLight(cname);
		Super.OnDestroy();
	}
}